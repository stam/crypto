  scalar Date
  type Query {
    tick(id: ID!): Tick
    candles: [Candle]
  }
  type Mutation {
    runSimulation(startValue: Float!, startFiat: Int!): Simulation
  }
  type Simulation {
    orders: [Order]
    trades: [Trade]
  }
  type Order {
    type: String
    date: Date
    quantity: Int
    price: Int
  }
  type Tick {
    id: Int!
    last: Int
    timestamp: Date
  }
  type Trade {
    buyPrice: Int
    sellPrice: Int
    buyDate: Date
    sellDate: Date
    result: Float
  }
  type Candle {
    id: Int
    open: Int
    close: Int
    high: Int
    low: Int
    datetime: Date
  }
