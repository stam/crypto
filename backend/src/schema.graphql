scalar Date
type Query {
  tick(id: ID!): Tick
  strategies: [String]
  candles: [Candle]
}
type Mutation {
  runSimulation(
    startValue: Float!
    startFiat: Int!
    strategy: String!
    startDate: Date
    endDate: Date
  ): Simulation
}
type Simulation {
  orders: [Order]
  trades: [Trade]
  startBalance: Int
  endBalance: Int
  profit: String
}
type Order {
  type: String
  side: String
  date: Date
  quantity: Float
  price: Int
  resultPrice: Int
}
type Tick {
  id: Int!
  last: Int
  timestamp: Date
}
type Trade {
  buyPrice: Int
  sellPrice: Int
  quantity: Float
  buyDate: Date
  sellDate: Date
  result: Float
}
type Candle {
  id: Int
  open: Int
  close: Int
  high: Int
  low: Int
  datetime: Date
}
